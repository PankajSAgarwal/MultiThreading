package com.pankaj.multithreading.priorityblockingqueue;

import java.util.concurrent.BlockingQueue;

class FirstWorker implements Runnable{
	
	private BlockingQueue<String> blockingQueue;
	
	public FirstWorker(BlockingQueue<String> blockingQueue) {
		
		this.blockingQueue = blockingQueue;
	}

	@Override
	public void run() {
		
		try {
			blockingQueue.put("B");
			blockingQueue.put("H");
			blockingQueue.put("F");
			Thread.sleep(1000);
			blockingQueue.put("A");
			Thread.sleep(1000);
			blockingQueue.put("E");
			
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}
		
	}
	
}

class SecondWorker implements Runnable{
	
	private BlockingQueue<String> blockingQueue;
	
	public SecondWorker(BlockingQueue<String> blockingQueue) {
		
		this.blockingQueue = blockingQueue;
	}

	@Override
	public void run() {
		
		try {
			Thread.sleep(5000);
			System.out.println(blockingQueue.take());
			Thread.sleep(1000);
			System.out.println(blockingQueue.take());
			Thread.sleep(1000);
			System.out.println(blockingQueue.take());
			Thread.sleep(1000);
			System.out.println(blockingQueue.take());
			Thread.sleep(1000);
			System.out.println(blockingQueue.take());
		
			
			
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}
		
	}
	
}

public class App {

	public static void main(String[] args) {
		

	}

}
