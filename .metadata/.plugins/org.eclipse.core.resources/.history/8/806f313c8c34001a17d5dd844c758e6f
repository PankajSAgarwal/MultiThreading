package com.pankaj.multithreading.producerconsumerwithlocks;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Worker {
	
	private Lock lock = new ReentrantLock();
	private Condition condition = lock.newCondition();
	
	public  void producer() throws InterruptedException{
		lock.lock();
		System.out.println("Producer method ...");
		condition.await();
		System.out.println("Producer again ...");
		lock.unlock();
		
	}
	
	public void consumer() throws InterruptedException{
		lock.lock();
		Thread.sleep(1000);
		System.out.println("Consumer method ...");
		condition.signal();
		lock.unlock();
	}
}

public class App {
	
	Worker worker = new Worker();
	

	public static void main(String[] args) {
		
		Thread t1 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				
				
			}
		});
		
		Thread t2 = new Thread(new Runnable() {
					
					@Override
					public void run() {
						
						
					}
				});
		
		t1.start();
		t2.start();
		
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}
	}

}
